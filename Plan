productName:string
universalProductCode:string
productDescription:string
perBatchQuantity:uint
totalBatches:uint
pricePerBatch:uint
batchIds:string[]


mapping(Address:address => Actor:Actor): Actor { name:string , type:string }
mapping(batchId:string => Track:Track): Track { previousOwners:Actor[] currentOwner:address }
Invoice { 
    productName, 
    universalProductCode, 
    pricePerBatch, 
    totalBatches, 
    batchIds, 
    totalPrice 
}
Request = { universalProductCode, batchQuantity, status }
Response = { requestStatus,  Invoice }
M_requestLog = Request[]
mapping(address =>Response[]) W_responseLog
M_inventory = batchIds[] 
mapping(address => batchIds[]) W_inventory

+ Manufacturer Methods
- registerWholesaler(name, type) returns(ack:bool)
- handlePurchaseRequest() returns(response:Response)


+ Wholesaler Methods
- requestToBuy(Request) returns(reqId:uint)
- payAndFinalizeTransaction() returns(ack:bool)
- registerRetailer(name, type) returns(ack:bool)

//To be Continued

+ Reatiler Methods
- registerCoustomer()